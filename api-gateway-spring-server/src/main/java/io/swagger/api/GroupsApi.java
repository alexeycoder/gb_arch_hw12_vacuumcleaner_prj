/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Device;
import io.swagger.model.Group;
import io.swagger.model.InlineResponse2011;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-01T15:58:00.855480115Z[GMT]")
@Validated
public interface GroupsApi {

    @Operation(summary = "Добавляет устройство", description = "Добавляет устройство", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "devices" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Устройство успешно добавлено", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2011.class))),
        
        @ApiResponse(responseCode = "400", description = "Некорректные данные устройства в запросе или номер группы"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Группа не найдена"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/groups/{groupNum}/devices",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2011> addDevice(@Parameter(in = ParameterIn.PATH, description = "Номер группы", required=true, schema=@Schema()) @PathVariable("groupNum") Object groupNum
, @Parameter(in = ParameterIn.DEFAULT, description = "Данные устройства", required=true, schema=@Schema()) @Valid @RequestBody Device body
);


    @Operation(summary = "Добавляет группу совместного пользования устройствами", description = "Добавляет группу совместного пользования устройствами", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "groups" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Группа успешно добавлена"),
        
        @ApiResponse(responseCode = "400", description = "Некорректные данные в запросе"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Пользователь не найден"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/groups",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addGroup(@Parameter(in = ParameterIn.DEFAULT, description = "Данные новой группы", required=true, schema=@Schema()) @Valid @RequestBody Group body
);


    @Operation(summary = "Удаляет группу совместного пользования устройствами", description = "Удаляет группу совместного пользования устройствами", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "groups" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Группа успешно удалена"),
        
        @ApiResponse(responseCode = "400", description = "Некорректный номер группы в запросе"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Группа не найдена"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/groups/{groupNum}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteGroup(@Parameter(in = ParameterIn.PATH, description = "Номер группы", required=true, schema=@Schema()) @PathVariable("groupNum") Object groupNum
);


    @Operation(summary = "Получает устройства группы", description = "Получает устройства группы", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "devices" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Данные всех устройств группы", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),
        
        @ApiResponse(responseCode = "400", description = "Некорректный номер группы"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Группа не найдена"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/groups/{groupNum}/devices",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> findAllDevicesByGroup(@Parameter(in = ParameterIn.PATH, description = "Номер группы", required=true, schema=@Schema()) @PathVariable("groupNum") Object groupNum
);


    @Operation(summary = "Ищет группу по номеру и возвращает её данные", description = "Ищет группу по номеру и возвращает её данные", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "groups" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))),
        
        @ApiResponse(responseCode = "400", description = "Некорректный номер группы в запросе"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Группа не найдена"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/groups/{groupNum}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Group> findGroupByNum(@Parameter(in = ParameterIn.PATH, description = "Номер группы", required=true, schema=@Schema()) @PathVariable("groupNum") Object groupNum
);


    @Operation(summary = "Обновляет данные группы совместного пользования устройствами", description = "Обновляет данные группы совместного пользования устройствами", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "groups" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Группа успешно обновлена"),
        
        @ApiResponse(responseCode = "400", description = "Некорректный номер группы в запросе"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Группа не найдена"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/groups/{groupNum}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateGroup(@Parameter(in = ParameterIn.PATH, description = "Номер группы", required=true, schema=@Schema()) @PathVariable("groupNum") Object groupNum
, @Parameter(in = ParameterIn.DEFAULT, description = "Данные группы", required=true, schema=@Schema()) @Valid @RequestBody Group body
);

}

