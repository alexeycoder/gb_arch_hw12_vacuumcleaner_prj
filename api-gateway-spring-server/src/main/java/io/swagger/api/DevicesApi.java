/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Device;
import io.swagger.model.DeviceState;
import io.swagger.model.InlineResponse2012;
import io.swagger.model.Schedule;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-01T15:58:00.855480115Z[GMT]")
@Validated
public interface DevicesApi {

    @Operation(summary = "Добавляет график работ для устройства", description = "Добавляет график работ для устройства", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "schedules" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "График работ успешно добавлен", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2012.class))),
        
        @ApiResponse(responseCode = "400", description = "Некорректные данные графика работ или некорректный идентификатор устройства в запросе "),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Устройство не найдено"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/devices/{deviceUuid}/schedules",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2012> addSchedule(@Parameter(in = ParameterIn.PATH, description = "Уникальный идентификатор устройства", required=true, schema=@Schema()) @PathVariable("deviceUuid") Object deviceUuid
, @Parameter(in = ParameterIn.DEFAULT, description = "Данные графика работ", required=true, schema=@Schema()) @Valid @RequestBody Schedule body
);


    @Operation(summary = "Удаляет устройство", description = "Удаляет устройство", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "devices" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Устройство успешно удалено"),
        
        @ApiResponse(responseCode = "400", description = "Некорректный идентификатор устройства"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Устройство не найдено"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/devices/{deviceUuid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDevice(@Parameter(in = ParameterIn.PATH, description = "Уникальный идентификатор устройства", required=true, schema=@Schema()) @PathVariable("deviceUuid") Object deviceUuid
);


    @Operation(summary = "Получает все графики работ устройства", description = "Получает все графики работ устройства", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "schedules" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),
        
        @ApiResponse(responseCode = "400", description = "Некорректный идентификатор устройства"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Устройство не найдено"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/devices/{deviceUuid}/schedules",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> findSchedules(@Parameter(in = ParameterIn.PATH, description = "Уникальный идентификатор устройства", required=true, schema=@Schema()) @PathVariable("deviceUuid") Object deviceUuid
);


    @Operation(summary = "Получает данные устройства", description = "Получает данные устройства", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "devices" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Device.class))),
        
        @ApiResponse(responseCode = "400", description = "Некорректный идентификатор устройства"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Устройство не найдено"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/devices/{deviceUuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Device> getDevice(@Parameter(in = ParameterIn.PATH, description = "Уникальный идентификатор устройства", required=true, schema=@Schema()) @PathVariable("deviceUuid") Object deviceUuid
);


    @Operation(summary = "Получает основные показатели состояния устройства", description = "Получает основные показатели состояния устройства.  При нахождении устройства и клиентского приложения в одном сегменте сети, приложению следует опрашивать устройство напрямую минуя API сервиса. ", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "devices" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DeviceState.class))),
        
        @ApiResponse(responseCode = "400", description = "Некорректные идентификатор устройства"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Устройство не найдено"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/devices/{deviceUuid}/state",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DeviceState> getDeviceState(@Parameter(in = ParameterIn.PATH, description = "Уникальный идентификатор устройства", required=true, schema=@Schema()) @PathVariable("deviceUuid") Object deviceUuid
);


    @Operation(summary = "Получает график работ устройства по номеру", description = "Получает график работ устройства по номеру", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "schedules" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Schedule.class))),
        
        @ApiResponse(responseCode = "400", description = "Некорректные идентификатор устройства или номер графика"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "График не найден"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/devices/{deviceUuid}/schedules/{scheduleNum}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Schedule> getSchedule(@Parameter(in = ParameterIn.PATH, description = "Уникальный идентификатор устройства", required=true, schema=@Schema()) @PathVariable("deviceUuid") Object deviceUuid
, @Parameter(in = ParameterIn.PATH, description = "Номер графика работ", required=true, schema=@Schema()) @PathVariable("scheduleNum") Object scheduleNum
);


    @Operation(summary = "Обновляет данные устройства", description = "Обновляет данные устройства", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "devices" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Данные устройства успешно обновлены"),
        
        @ApiResponse(responseCode = "400", description = "Некорректный идентификатор устройства"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "Устройство не найдено"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/devices/{deviceUuid}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateDevice(@Parameter(in = ParameterIn.PATH, description = "Уникальный идентификатор устройства", required=true, schema=@Schema()) @PathVariable("deviceUuid") Object deviceUuid
, @Parameter(in = ParameterIn.DEFAULT, description = "Данные устройства для обновления", required=true, schema=@Schema()) @Valid @RequestBody Device body
);


    @Operation(summary = "Обновить график работ", description = "Обновить график работ", security = {
        @SecurityRequirement(name = "ApiTokenAuth")    }, tags={ "schedules" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Некорректные идентификатор устройства или номер графика"),
        
        @ApiResponse(responseCode = "401", description = "Несанкционированный доступ"),
        
        @ApiResponse(responseCode = "404", description = "График не найден"),
        
        @ApiResponse(responseCode = "200", description = "Ошибка сервера") })
    @RequestMapping(value = "/devices/{deviceUuid}/schedules/{scheduleNum}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSchedule(@Parameter(in = ParameterIn.PATH, description = "Уникальный идентификатор устройства", required=true, schema=@Schema()) @PathVariable("deviceUuid") Object deviceUuid
, @Parameter(in = ParameterIn.PATH, description = "Номер графика работ", required=true, schema=@Schema()) @PathVariable("scheduleNum") Object scheduleNum
, @Parameter(in = ParameterIn.DEFAULT, description = "Данные графика работ для обновления", required=true, schema=@Schema()) @Valid @RequestBody Schedule body
);

}

